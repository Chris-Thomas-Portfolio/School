// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/26/2020 13:24:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DoorLock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DoorLock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] btn;
reg clk;
reg reset;
// wires                                               
wire [7:0] LEDR;
wire [5:4] ld;

// assign statements (if any)                          
DoorLock i1 (
// port map - connection between master ports and signals/registers   
	.LEDR(LEDR),
	.btn(btn),
	.clk(clk),
	.ld(ld),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #430000 1'b1;
	reset = #40000 1'b0;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 

// btn[2]
initial
begin
	btn[2] = 1'b0;
	btn[2] = #20000 1'b1;
	btn[2] = #50000 1'b0;
	btn[2] = #280000 1'b1;
	btn[2] = #30000 1'b0;
	btn[2] = #440000 1'b1;
	btn[2] = #40000 1'b0;
end 

// btn[1]
initial
begin
	btn[1] = 1'b0;
	btn[1] = #180000 1'b1;
	btn[1] = #50000 1'b0;
	btn[1] = #280000 1'b1;
	btn[1] = #30000 1'b0;
	btn[1] = #130000 1'b1;
	btn[1] = #30000 1'b0;
end 

// btn[0]
initial
begin
	btn[0] = 1'b0;
	btn[0] = #100000 1'b1;
	btn[0] = #40000 1'b0;
	btn[0] = #120000 1'b1;
	btn[0] = #40000 1'b0;
	btn[0] = #290000 1'b1;
	btn[0] = #30000 1'b0;
	btn[0] = #130000 1'b1;
	btn[0] = #30000 1'b0;
end 
endmodule

